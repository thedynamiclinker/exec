#!/usr/bin/python3


"""
Run in a proper TTY, not a PTY.
"""

import os, sys, re, glob, time, tty
from math import sqrt
from math import sin, cos

os.system("setterm -cursor off > $(tty)")

def rangeL(*args): return list(range(*args))
def zipL(*args): return list(zip(*args))

try:
    screen_width, screen_height = os.popen('/sys/class/graphics/fb0/virtual_size').read().strip().split(',')
    screen_width = eval(screen_width)
    screen_height = eval(screen_height)
except:
    screen_width  = 1920
    screen_height = 1080

bytes_per_pixel = 4
screen_pixels = (screen_width)*(screen_height)
bytes_per_row = (screen_width)*(bytes_per_pixel)

whi = b'\xff\xff\xff\xff'
cya = b'\xff\xff\x00\x00'
red = b'\x00\x00\xff\x00'
blu = b'\xff\x00\x00\xff'
pur = b'\xff\x00\xff\xff'
yel = b'\x00\xff\xff\x00'
gre = b'\x00\xff\x00\xff'
bla = b'\x00\x00\x00\x00'

# Note: In what follows, the functions that actually make use 
# of fp are at the lowest level of the abstraction hierarchy.


def getLocation(x,y):
    byte = x*(bytes_per_pixel) + y*(screen_width)*(bytes_per_pixel)
    return byte


def drawPixel(x, y, color=whi):
    fp.seek(getLocation(x,y))
    fp.write(color)


def drawHorizontalLine(x1, x2, y, color=whi):
    dist = abs(x2 - x1) + 1
    xL = min(x1, x2)
    fp.seek(getLocation(xL,y))
    fp.write(color*dist)


def drawVerticalLine(x, y1, y2, color=whi):
    dist = abs(y2 - y1) + 1
    yT = min(y1, y2)
    for i in range(dist):
        y = yT + i
        drawPixel(x, y, color)


def drawEmptyRectangle(xTL, yTL, xBR, yBR, color=whi):
    drawHorizontalLine(xTL, xBR, yTL, color)
    drawHorizontalLine(xTL, xBR, yBR, color)
    drawVerticalLine(xTL, yTL, yBR, color)
    drawVerticalLine(xBR, yTL, yBR, color)


def drawFilledRectangle(xTL,yTL,xBR,yBR,color=whi):
    beg, end = (yTL, yBR)
    for height in range(beg, end):
        drawHorizontalLine(xTL, xBR, height, color)


def drawEmptyCircle(x, y, r, width=1, color=whi):
    # Only doing the first one of these loops gives us 
    # a strange looking result. We can improve it by drawing
    # vertically, and then drawing horizontally.
    for dy in range(-r,r+1):
        dist = round(sqrt(r**2 - dy**2))
        for i in range(width):
            drawPixel(x-(dist+i), y+dy, color)
            drawPixel(x+(dist+i), y+dy, color)
    for dx in range(-r,r+1):
        dist = round(sqrt(r**2 - dx**2))
        for i in range(width):
            drawPixel(x+dx, y-(dist+i), color)
            drawPixel(x+dx, y+(dist+i), color)

def drawFilledCircle(x, y, r, color=whi):
    beg, end = (-r, r+1)
    for dy in range(beg, end):
        dist = int(sqrt(r**2 - dy**2))
        drawHorizontalLine(x-dist, x+dist, y+dy, color)


def exampleDrawShapes():
    drawFilledRectangle(500, 50, 700, 150, color=pur)
    drawFilledCircle(600, 400, 100, color=red)
    drawEmptyCircle(800, 500, 100, width=3, color=gre)


def exampleDrawBackground():
    gap = round(screen_width/40)
    xTL = gap
    yTL = gap
    xBR = screen_width - gap
    yBR = screen_height - gap
    drawFilledRectangle(0,0,screen_width,screen_height,color=bla)
    drawFilledRectangle(xTL, yTL, xBR, yBR, color=whi)
    drawFilledRectangle(xTL+gap, yTL+gap, xBR-gap, yBR-gap, color=blu)


def repositionShapes(x,y):
    drawFilledRectangle(500+x, 50+y, 700+x, 150+y, color=pur)
    drawFilledCircle(600+x, 400+y, 100, color=red)
    drawEmptyCircle(800+x, 500+y, 100, width=3, color=gre)


def exampleHolyFuckDancingShapes():
    for t in range(100):
        drawFilledRectangle(0, 0, screen_width, screen_height, color=bla)
        exampleDrawBackground()
        repositionShapes(round(50*cos(t)),round(50*sin(t)))
        os.system('cat %s > /dev/fb0' % fp.name)


def exampleInteractive():
    x,y = (0,0)
    char = None
    stepsize = 15
    exampleDrawBackground()
    repositionShapes(x,y)
    os.system(f'cat {fp.name} > /dev/fb0 2>/dev/null')
    while (char != 'x'):
        char = sys.stdin.read(1).encode('utf-8')
        if char == b'\x1b':
            char += sys.stdin.read(2).encode('utf-8')
        if   char in UPS:       y -= stepsize
        elif char in LEFTS:     x -= stepsize
        elif char in DOWNS:     y += stepsize
        elif char in RIGHTS:    x += stepsize
        else:
            with open('a', 'ab') as a:
                a.write(char)
        exampleDrawBackground()
        repositionShapes(x,y)
        os.system(f'cat {fp.name} > /dev/fb0 2>/dev/null')
        tty.tcflush(0, tty.TCIFLUSH)

UPS     = {b'w', b'\x1b[A'}
DOWNS   = {b's', b'\x1b[B'}
RIGHTS  = {b'd', b'\x1b[C'}
LEFTS   = {b'a', b'\x1b[D'}

# Exit by pressing x
# Go one frame forward by pressing j
saved_config = tty.tcgetattr(0)
tty.setcbreak(sys.stdin)
fp = open('/tmp/framebuffer', 'bw')

try:
    exampleInteractive()
    #exampleHolyFuckDancingShapes()
except:
    pass
finally:
    fp.close()
    tty.tcsetattr(0, tty.TCSADRAIN, saved_config)
    os.system("setterm -cursor on -blink on > $(tty)")
    os.system('clear')
    os.system('reset')


